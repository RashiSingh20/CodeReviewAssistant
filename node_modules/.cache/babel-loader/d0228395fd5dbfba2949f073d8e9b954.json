{"ast":null,"code":"var _jsxFileName = \"C:\\\\ustcode\\\\my-react-file-upload-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\nimport './styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n\n  // Define the handleFileUpload function\n  const handleFileUpload = newFiles => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]); // Append new files to the existing list\n  };\n  const handleCodeReview = async file => {\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const fileContent = event.target.result;\n\n      // Azure OpenAI API details\n      const endpoint = \"https://<your-resource-name>.openai.azure.com/\";\n      const apiKey = \"YOUR_AZURE_API_KEY\";\n      const deploymentName = \"YOUR_DEPLOYED_MODEL_NAME\"; // e.g., \"text-davinci-003\"\n\n      try {\n        const response = await fetch(`${endpoint}openai/deployments/${deploymentName}/completions?api-version=2023-03-15-preview`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'api-key': apiKey // Azure OpenAI requires 'api-key' header\n          },\n          body: JSON.stringify({\n            prompt: `Review the following code:\\n\\n${fileContent}`,\n            max_tokens: 500\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Azure OpenAI API error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        alert(`Code Review Result:\\n\\n${data.choices[0].text}`);\n      } catch (error) {\n        console.error(\"Error during code review:\", error);\n        alert(\"Failed to perform code review. Please check the console for details.\");\n      }\n    };\n    reader.readAsText(file); // Read the file content as text\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Upload and Code Review\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onFileUpload: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileList, {\n      files: files,\n      onCodeReview: handleCodeReview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aPldHTVBr/g7fY6pAkrAgkA0SoA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FileUpload","FileList","jsxDEV","_jsxDEV","App","_s","files","setFiles","handleFileUpload","newFiles","prevFiles","handleCodeReview","file","reader","FileReader","onload","event","fileContent","target","result","endpoint","apiKey","deploymentName","response","fetch","method","headers","body","JSON","stringify","prompt","max_tokens","ok","Error","statusText","data","json","alert","choices","text","error","console","readAsText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFileUpload","onCodeReview","_c","$RefreshReg$"],"sources":["C:/ustcode/my-react-file-upload-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\nimport './styles/styles.css';\n\nconst App = () => {\n  const [files, setFiles] = useState([]);\n\n  // Define the handleFileUpload function\n  const handleFileUpload = (newFiles) => {\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]); // Append new files to the existing list\n  };\n\n  const handleCodeReview = async (file) => {\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const fileContent = event.target.result;\n\n      // Azure OpenAI API details\n      const endpoint = \"https://<your-resource-name>.openai.azure.com/\";\n      const apiKey = \"YOUR_AZURE_API_KEY\";\n      const deploymentName = \"YOUR_DEPLOYED_MODEL_NAME\"; // e.g., \"text-davinci-003\"\n\n      try {\n        const response = await fetch(`${endpoint}openai/deployments/${deploymentName}/completions?api-version=2023-03-15-preview`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'api-key': apiKey, // Azure OpenAI requires 'api-key' header\n          },\n          body: JSON.stringify({\n            prompt: `Review the following code:\\n\\n${fileContent}`,\n            max_tokens: 500,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Azure OpenAI API error: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        alert(`Code Review Result:\\n\\n${data.choices[0].text}`);\n      } catch (error) {\n        console.error(\"Error during code review:\", error);\n        alert(\"Failed to perform code review. Please check the console for details.\");\n      }\n    };\n\n    reader.readAsText(file); // Read the file content as text\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>File Upload and Code Review</h1>\n      <FileUpload onFileUpload={handleFileUpload} />\n      <FileList files={files} onCodeReview={handleCodeReview} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMS,gBAAgB,GAAIC,QAAQ,IAAK;IACrCF,QAAQ,CAAEG,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,KAAK,IAAK;MAC/B,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;;MAEvC;MACA,MAAMC,QAAQ,GAAG,gDAAgD;MACjE,MAAMC,MAAM,GAAG,oBAAoB;MACnC,MAAMC,cAAc,GAAG,0BAA0B,CAAC,CAAC;;MAEnD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,sBAAsBE,cAAc,6CAA6C,EAAE;UACzHG,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,SAAS,EAAEL,MAAM,CAAE;UACrB,CAAC;UACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,MAAM,EAAE,iCAAiCb,WAAW,EAAE;YACtDc,UAAU,EAAE;UACd,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BV,QAAQ,CAACW,UAAU,EAAE,CAAC;QACnE;QAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QAClCC,KAAK,CAAC,0BAA0BF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE,CAAC;MACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDH,KAAK,CAAC,sEAAsE,CAAC;MAC/E;IACF,CAAC;IAEDxB,MAAM,CAAC6B,UAAU,CAAC9B,IAAI,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,oBACET,OAAA;IAAKwC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzC,OAAA;MAAAyC,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpC7C,OAAA,CAACH,UAAU;MAACiD,YAAY,EAAEzC;IAAiB;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9C7C,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA,KAAM;MAAC4C,YAAY,EAAEvC;IAAiB;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAtDID,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AAwDT,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}