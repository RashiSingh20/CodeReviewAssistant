{"ast":null,"code":"var _jsxFileName = \"C:\\\\ustcode\\\\my-react-file-upload-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\n// filepath: c:\\ustcode\\my-react-file-upload-app\\src\\App.js\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const handleFileUpload = newFiles => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]); // Append new files to the list\n  };\n  const handleCodeReview = async file => {\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const fileContent = event.target.result;\n\n      // Call your AI API here (e.g., OpenAI API)\n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer YOUR_API_KEY`\n        },\n        body: JSON.stringify({\n          model: 'text-davinci-003',\n          prompt: `Review the following code:\\n\\n${fileContent}`,\n          max_tokens: 500\n        })\n      });\n      const data = await response.json();\n      alert(`Code Review Result:\\n\\n${data.choices[0].text}`);\n    };\n    reader.readAsText(file); // Read the file content as text\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Upload and Code Review\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onFileUpload: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileList, {\n      files: files,\n      onCodeReview: handleCodeReview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aPldHTVBr/g7fY6pAkrAgkA0SoA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FileUpload","FileList","jsxDEV","_jsxDEV","App","_s","files","setFiles","handleFileUpload","newFiles","prevFiles","handleCodeReview","file","reader","FileReader","onload","event","fileContent","target","result","response","fetch","method","headers","Authorization","body","JSON","stringify","model","prompt","max_tokens","data","json","alert","choices","text","readAsText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFileUpload","onCodeReview","_c","$RefreshReg$"],"sources":["C:/ustcode/my-react-file-upload-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\n// filepath: c:\\ustcode\\my-react-file-upload-app\\src\\App.js\nimport './styles.css';\n\nconst App = () => {\n  const [files, setFiles] = useState([]);\n\n  const handleFileUpload = (newFiles) => {\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]); // Append new files to the list\n  };\n\n  const handleCodeReview = async (file) => {\n    const reader = new FileReader();\n  \n    reader.onload = async (event) => {\n      const fileContent = event.target.result;\n  \n      // Call your AI API here (e.g., OpenAI API)\n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer YOUR_API_KEY`,\n        },\n        body: JSON.stringify({\n          model: 'text-davinci-003',\n          prompt: `Review the following code:\\n\\n${fileContent}`,\n          max_tokens: 500,\n        }),\n      });\n  \n      const data = await response.json();\n      alert(`Code Review Result:\\n\\n${data.choices[0].text}`);\n    };\n  \n    reader.readAsText(file); // Read the file content as text\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>File Upload and Code Review</h1>\n      <FileUpload onFileUpload={handleFileUpload} />\n      <FileList files={files} onCodeReview={handleCodeReview} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C;AACA,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMS,gBAAgB,GAAIC,QAAQ,IAAK;IACrCF,QAAQ,CAAEG,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,KAAK,IAAK;MAC/B,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;;MAEvC;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAE,iCAAiCZ,WAAW,EAAE;UACtDa,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCC,KAAK,CAAC,0BAA0BF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE,CAAC;IACzD,CAAC;IAEDtB,MAAM,CAACuB,UAAU,CAACxB,IAAI,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,oBACET,OAAA;IAAKkC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnC,OAAA;MAAAmC,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpCvC,OAAA,CAACH,UAAU;MAAC2C,YAAY,EAAEnC;IAAiB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9CvC,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA,KAAM;MAACsC,YAAY,EAAEjC;IAAiB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAACrC,EAAA,CAzCID,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AA2CT,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}